// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace CustomGrids
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class CustomGridsInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public CustomGridsInputs(CustomGridsInputsMode @mode, IList<GridAreas> @gridAreas, bool @showDebugGeometry, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<CustomGridsInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @mode, @gridAreas, @showDebugGeometry});
            }
        
            this.Mode = @mode;
            this.GridAreas = @gridAreas;
            this.ShowDebugGeometry = @showDebugGeometry;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Are grid positions absolute from their origin, or relative to the last gridline?</summary>
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomGridsInputsMode Mode { get; set; } = CustomGridsInputsMode.Relative;
    
        /// <summary>List of grids enclosed by the area they apply to.</summary>
        [Newtonsoft.Json.JsonProperty("Grid Areas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridAreas> GridAreas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Show Debug Geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowDebugGeometry { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CustomGridsInputsMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Absolute")]
        Absolute = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Relative")]
        Relative = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridAreas 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridAreas(string @name, Transform @orientation, U @u, V @v)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridAreas>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @orientation, @u, @v});
            }
        
            this.Name = @name;
            this.Orientation = @orientation;
            this.U = @u;
            this.V = @v;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; } = "Main";
    
        /// <summary>The origin and rotation of your grid</summary>
        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("U", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public U U { get; set; }
    
        [Newtonsoft.Json.JsonProperty("V", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V V { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class U 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public U(string @name, IList<double> @spacing, IList<GridLines> @gridLines)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<U>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @spacing, @gridLines});
            }
        
            this.Name = @name;
            this.Spacing = @spacing;
            this.GridLines = @gridLines;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; } = "{A}";
    
        /// <summary>Please use Relative mode and Grid Lines &gt; Spacing instead of Spacing.</summary>
        [Newtonsoft.Json.JsonProperty("Spacing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<double> Spacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Grid Lines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridLines> GridLines { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class V 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public V(string @name, IList<double> @spacing, IList<GridLines> @gridLines)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<V>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @spacing, @gridLines});
            }
        
            this.Name = @name;
            this.Spacing = @spacing;
            this.GridLines = @gridLines;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; } = "{1}";
    
        /// <summary>Please use Relative mode and Grid Lines &gt; Spacing instead of Spacing.</summary>
        [Newtonsoft.Json.JsonProperty("Spacing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<double> Spacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Grid Lines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridLines> GridLines { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridLines 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridLines(double @location, double @spacing, int @quantity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridLines>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @location, @spacing, @quantity});
            }
        
            this.Location = @location;
            this.Spacing = @spacing;
            this.Quantity = @quantity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Spacing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Spacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; } = 1;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
}