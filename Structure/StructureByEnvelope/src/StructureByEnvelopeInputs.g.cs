// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Properties;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace StructureByEnvelope
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class StructureByEnvelopeInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public StructureByEnvelopeInputs(double @gridXAxisInterval, double @slabEdgeOffset, bool @displayGrid, double @gridYAxisInterval, StructureByEnvelopeInputsTypeOfConstruction @typeOfConstruction, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<StructureByEnvelopeInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @gridXAxisInterval, @slabEdgeOffset, @displayGrid, @gridYAxisInterval, @typeOfConstruction});
            }
        
            this.GridXAxisInterval = @gridXAxisInterval;
            this.SlabEdgeOffset = @slabEdgeOffset;
            this.DisplayGrid = @displayGrid;
            this.GridYAxisInterval = @gridYAxisInterval;
            this.TypeOfConstruction = @typeOfConstruction;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Grix interval in the X direction.</summary>
        [Newtonsoft.Json.JsonProperty("Grid X-Axis Interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(3D, 10D)]
        public double GridXAxisInterval { get; set; } = 3D;
    
        /// <summary>The offset of the grid lines from the slab edge.</summary>
        [Newtonsoft.Json.JsonProperty("Slab Edge Offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 3D)]
        public double SlabEdgeOffset { get; set; } = 0.5D;
    
        /// <summary>Display the grid on the ground plane?</summary>
        [Newtonsoft.Json.JsonProperty("Display Grid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisplayGrid { get; set; } = false;
    
        /// <summary>Grid interval in the Y direction.</summary>
        [Newtonsoft.Json.JsonProperty("Grid Y-Axis Interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(3D, 10D)]
        public double GridYAxisInterval { get; set; } = 3D;
    
        /// <summary>The system used for construction.</summary>
        [Newtonsoft.Json.JsonProperty("Type of Construction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StructureByEnvelopeInputsTypeOfConstruction TypeOfConstruction { get; set; } = StructureByEnvelopeInputsTypeOfConstruction.Steel;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum StructureByEnvelopeInputsTypeOfConstruction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Steel")]
        Steel = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MassTimber")]
        MassTimber = 1,
    
    }
}