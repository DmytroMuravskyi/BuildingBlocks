// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace RoofByDXF
{
    public class RoofByDXFInputs: S3Args
    {
		/// <summary>
		/// DXF format closed LWPolylines representing a roof edge and openings within or aligned with the perimeter.
		/// The system will set this property to the data's path on disk.
		/// </summary>
		[JsonProperty("DXF")]
		[JsonConverter(typeof(StringToInputDataConverter))]
		public InputData DXF {get; internal set;}

		/// <summary>
		/// Roof elevation relative to the zero plane.
		/// </summary>
		[JsonProperty("Roof Elevation")]
		public double RoofElevation {get;}

		/// <summary>
		/// Thickness of the Roof.
		/// </summary>
		[JsonProperty("Roof Thickness")]
		public double RoofThickness {get;}



        /// <summary>
        /// Construct a RoofByDXFInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public RoofByDXFInputs() : base()
        {
			this.DXF = new InputData("default_input.dxf");
			this.RoofElevation = 30;
			this.RoofThickness = 1;

        }


        /// <summary>
        /// Construct a RoofByDXFInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public RoofByDXFInputs(InputData dXF, double roofElevation, double roofThickness, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.DXF = dXF;
			this.RoofElevation = roofElevation;
			this.RoofThickness = roofThickness;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}