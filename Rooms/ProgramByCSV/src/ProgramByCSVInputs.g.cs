// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace ProgramByCSV
{
    public class ProgramByCSVInputs: S3Args
    {
		/// <summary>
		/// A CSV list of room definitions.
		/// The system will set this property to the data's path on disk.
		/// </summary>
		[JsonProperty("Program")]
		[JsonConverter(typeof(StringToInputDataConverter))]
		public InputData Program {get; internal set;}

		/// <summary>
		/// Default is metric units.
		/// </summary>
		[JsonProperty("Use imperial units")]
		public bool UseImperialUnits {get;}

		/// <summary>
		/// Changes the sequence of the suites.
		/// </summary>
		[JsonProperty("Suite Sequence")]
		[JsonConverter(typeof(StringEnumConverter))]
		public SuiteSequence SuiteSequence {get;}

		/// <summary>
		/// Changes the sequence of the rooms in each suite.
		/// </summary>
		[JsonProperty("Room Sequence")]
		[JsonConverter(typeof(StringEnumConverter))]
		public RoomSequence RoomSequence {get;}



        /// <summary>
        /// Construct a ProgramByCSVInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public ProgramByCSVInputs() : base()
        {
			this.Program = new InputData("default_input.csv");
			this.UseImperialUnits = false;
			this.SuiteSequence = SuiteSequence.Listed;
			this.RoomSequence = RoomSequence.Listed;

        }


        /// <summary>
        /// Construct a ProgramByCSVInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public ProgramByCSVInputs(InputData program, bool useImperialUnits, SuiteSequence suiteSequence, RoomSequence roomSequence, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.Program = program;
			this.UseImperialUnits = useImperialUnits;
			this.SuiteSequence = suiteSequence;
			this.RoomSequence = roomSequence;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}