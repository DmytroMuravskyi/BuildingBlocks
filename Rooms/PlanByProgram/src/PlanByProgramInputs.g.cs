// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace PlanByProgram
{
    public class PlanByProgramInputs: S3Args
    {
		/// <summary>
		/// Desired x-to-y ratio of Suites.
		/// </summary>
		[JsonProperty("Suite Ratio")]
		public double SuiteRatio {get;}

		/// <summary>
		/// Width of all corridors.
		/// </summary>
		[JsonProperty("Corridor Width")]
		public double CorridorWidth {get;}

		/// <summary>
		/// Vertical distance from highest room to next level above..
		/// </summary>
		[JsonProperty("Plenum Height")]
		public double PlenumHeight {get;}

		/// <summary>
		/// When adjacency fails, move up one story.
		/// </summary>
		[JsonProperty("Multiple Levels")]
		public bool MultipleLevels {get;}

		/// <summary>
		/// Diagonal suite placement is considered adjacent to previous suite.
		/// </summary>
		[JsonProperty("Diagonal Adjacency")]
		public bool DiagonalAdjacency {get;}

		/// <summary>
		/// Creates floors conforming to the merged shape of suite Rooms.
		/// </summary>
		[JsonProperty("Conform Floors to Rooms")]
		public bool ConformFloorsToRooms {get;}

		/// <summary>
		/// Axis: Rooms to either side of an axis. Reciprocal: Rooms fitted within a boundary of the suite area at the input ratio.
		/// </summary>
		[JsonProperty("Suite Plan Type")]
		[JsonConverter(typeof(StringEnumConverter))]
		public SuitePlanType SuitePlanType {get;}

		/// <summary>
		/// Selects the relative location to attempt compact suite adjacency.
		/// </summary>
		[JsonProperty("Primary Direction")]
		[JsonConverter(typeof(StringEnumConverter))]
		public PrimaryDirection PrimaryDirection {get;}

		/// <summary>
		/// Selects the relative lateral relationship between suites.
		/// </summary>
		[JsonProperty("Coordinate Adjacency")]
		[JsonConverter(typeof(StringEnumConverter))]
		public CoordinateAdjacency CoordinateAdjacency {get;}



        /// <summary>
        /// Construct a PlanByProgramInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public PlanByProgramInputs() : base()
        {
			this.SuiteRatio = 2;
			this.CorridorWidth = 4;
			this.PlenumHeight = 3;
			this.MultipleLevels = false;
			this.DiagonalAdjacency = false;
			this.ConformFloorsToRooms = false;
			this.SuitePlanType = SuitePlanType.Axis;
			this.PrimaryDirection = PrimaryDirection.Northeast;
			this.CoordinateAdjacency = CoordinateAdjacency.Minimum;

        }


        /// <summary>
        /// Construct a PlanByProgramInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public PlanByProgramInputs(double suiteRatio, double corridorWidth, double plenumHeight, bool multipleLevels, bool diagonalAdjacency, bool conformFloorsToRooms, SuitePlanType suitePlanType, PrimaryDirection primaryDirection, CoordinateAdjacency coordinateAdjacency, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.SuiteRatio = suiteRatio;
			this.CorridorWidth = corridorWidth;
			this.PlenumHeight = plenumHeight;
			this.MultipleLevels = multipleLevels;
			this.DiagonalAdjacency = diagonalAdjacency;
			this.ConformFloorsToRooms = conformFloorsToRooms;
			this.SuitePlanType = suitePlanType;
			this.PrimaryDirection = primaryDirection;
			this.CoordinateAdjacency = coordinateAdjacency;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}